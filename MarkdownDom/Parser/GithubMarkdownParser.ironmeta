using System;
using System.Linq;
using Net.Yingzxu.MarkdownDom;
using Net.Yingzxu.MarkdownDom.Base;
using Net.Yingzxu.MarkdownDom.Elements;
using Net.Yingzxu.MarkdownDom.PostProcess;
// This grammar is far more complicated than 
// it needs to be, in order to demonstrate
// the features of the IronMeta system.

ironmeta GithubMarkdown<char, MarkdownElementBase> : IronMeta.Matcher.CharMatcher<MarkdownElementBase>
{
    Document = Block*:block EOF -> { 
		MarkdownDocument root = new MarkdownDocument(); 
		//merge blockquote sequence
		MarkdownElementBase[] innerBlocks =  block.Results.ToArray<MarkdownElementBase>();
		PostProcessor.PostProcess(innerBlocks,root);
		return root;
	}	;
    Block = 
		BlankLine : blankline -> {blankline}
		| LineBreak
		| Head: head -> {head}
		| Blockquote : quote -> {quote}
		| UnorderedList : ulist -> {ulist}
		| Paragraph : para -> {para}
	;
	// -
	UnorderedList = LegalStartSpace ListItemSymbol WS+ () InlineText:textContent
					(LineBreak ) 
	;   
	Head = HeadSymbol:symbol HeadText:text ->
		{	HeaderElement head = new HeaderElement(); 
			head.Size=symbol.Results.First().TextContent.Length;
			head.TextContent=text.Results.First().TextContent;
			//remove the tailing #
			head.TextContent=head.TextContent.TrimEnd('#');
			return head;
		};
	Paragraph = AnyText:text -> 
		{
			GeneralElement para = new GeneralElement(ElementType.Paragraph); 
			para.AddChildElement(text.Results.First());
			return para;
		};
	Blockquote = BlockquoteSymbol:symbol (Head | InlineText)*:inner (LineBreak? InlineText)*:children-> 
		{
			BlockquoteElement block = new BlockquoteElement(); 
			block.QuoteLevel=symbol.Results.First().TextContent.Length;
			block.AddChildrenElements(inner.Results.AsEnumerable<MarkdownElementBase>());
			block.AddChildrenElements(children.Results.AsEnumerable<MarkdownElementBase>());
			return block;
		};

	LineBreak =  '\r' '\n'? | '\n' ;
	HeadText = (~LineBreak .)* -> {
		string match=Input(_IM_Result) ;
		GeneralElement text = new GeneralElement(ElementType.InlineText); 
		text.TextContent=match;
		return text;}; 

	//PlainText Bold or Italic etc..
	InlineText = ~StartSymbol (~('\n' | '\r') .)+ -> {
		string match=Input(_IM_Result) ;
		GeneralElement text = new GeneralElement(ElementType.InlineText); 
		text.TextContent=match;
		return text;}; 

	AnyText = (~('\n' | '\r') .)+ -> {
	string match=Input(_IM_Result) ;
	GeneralElement text = new GeneralElement(ElementType.InlineText); 
	text.TextContent=match;
	return text;}; 

	StartSymbol = LegalStartSpace? '>';
	LegalStartSpace = ' '{1,3};
	HeadSymbol = '#'+ -> {
		string match=Input(_IM_Result) ;
		GeneralElement text = new GeneralElement(ElementType.InlineText); 
		text.TextContent=match;
		return text;}; 

	BlockquoteSymbol = LegalStartSpace? '>'+ -> {
		string match=Input(_IM_Result) ;
		GeneralElement text = new GeneralElement(ElementType.InlineText); 
		text.TextContent=match;
		return text;}; 
	BlankLine = LineBreak WS* LineBreak -> {
		GeneralElement blank = new GeneralElement(ElementType.BlankLine); 
		return blank;};

	ListItemSymbol = '*' | '-';
	DG = ['0'-'9'];
	EN = ['a'-'z'] | ['A'-'Z'];
    WS = ' ' | '\t'; 
	EOF = ~. ;
	//eight blank
	CodeBlockStart = (' ':'\t')+:res ?( res.ToString().Replace('\t',' ').Length = 8 );
} 
